{"version":3,"sources":["components/Navbar.js","components/Hotels.js","actions/hotelActions.js","serviceWorker.js","reducers/hotelReducer.js","reducers/rootReducer.js","index.js","store.js","App.js"],"names":["Navbar","react_default","a","createElement","AppBar","position","Toolbar","className","Typography","variant","Hotels","axios","get","hotels","this","props","getHotels","data","prices","embedPrices","details","getDetails","obj","arr","Object","values","filter","n","Math","min","apply","toConsumableArray","_this","Box","mt","Container","hotelReducer","map","hotel","ExpansionPanel","key","id","ExpansionPanelSummary","expandIcon","ExpandMore_default","_buildSummary","Divider","ExpansionPanelDetails","_buildDetails","width","display","flexDirection","_buildPriceList","_buildPolicyList","_buildEssentialsList","flexGrow","List","dense","essentials","essential","random","ListItem","ListItemText","primary","policies","policy","price","keys","button","charAt","toUpperCase","slice","secondary","name","style","fontSize","locality","city","getMinimumFromObj","Infinity","Component","connect","state","objectSpread","dispatch","payload","type","Boolean","window","location","hostname","match","initState","combineReducers","a1","a2","arguments","length","undefined","action","concat","itm","find","item","theme","createMuiTheme","palette","main","contrastText","ReactDOM","render","MuiThemeProvider","es","store","createStore","rootReducer","components_Hotels","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.325903e5.chunk.js","sourcesContent":["import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport default function Navbar() {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar className=\"justify-content-center\">\n        <Typography variant=\"h6\">Treebo Hotels</Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\nimport { Container, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Typography, Box, List, ListItem, ListItemText, Divider } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport { connect } from 'react-redux'\nimport { getHotels, embedPrices, getDetails } from '../actions/hotelActions';\n\nclass Hotels extends Component {\n  async componentDidMount() {\n    let hotels = await axios.get('http://www.mocky.io/v2/5a7f23442e00005000b56873')\n    this.props.getHotels(hotels.data.data);\n\n    let prices = await axios.get('http://www.mocky.io/v2/5a7f24f02e00005200b56875')\n    this.props.embedPrices(prices.data.data);\n\n    let details = await axios.get('http://www.mocky.io/v2/5a7f265b2e00005d00b56877')\n    this.props.getDetails(details.data.data)\n  }\n\n  getMinimumFromObj(obj) {\n    let arr = Object.values(obj).filter(n => n);\n    return Math.min(...arr);\n  }\n\n  render() {\n    return (\n      <Box mt={5}>\n        <Container>\n          {\n            this.props.hotelReducer.hotels.map(hotel => {\n              return (\n                <ExpansionPanel key={hotel.id}>\n                  <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}>\n                    {this._buildSummary(hotel)}\n                  </ExpansionPanelSummary>\n                  <Divider />\n                  <ExpansionPanelDetails>\n                    {this._buildDetails(hotel)}\n                  </ExpansionPanelDetails>\n                </ExpansionPanel>\n              )\n            })\n          }\n        </Container>\n      </Box>\n    )\n  }\n\n  _buildDetails(hotel) {\n    return <Box width=\"60%\" display=\"flex\" flexDirection=\"row\">\n      {this._buildPriceList(hotel)}\n      {this._buildPolicyList(hotel)}\n      {this._buildEssentialsList(hotel)}\n    </Box>;\n  }\n\n  _buildEssentialsList(hotel) {\n    return <Box flexGrow=\"1\">\n      <List dense={true}>\n        <Typography variant=\"caption\">Essentials</Typography>\n        {hotel.details ?\n          hotel.details.essentials.map(essential => {\n            return (<div key={Math.random()}>\n              <ListItem>\n                <ListItemText primary={essential}></ListItemText>\n              </ListItem>\n            </div>);\n          })\n          : <Typography></Typography>}\n      </List>\n    </Box>;\n  }\n\n  _buildPolicyList(hotel) {\n    return <Box flexGrow=\"1\">\n      <List dense={true}>\n        <Typography variant=\"caption\">Policies</Typography>\n        {hotel.details ?\n          hotel.details.policies.map(policy => {\n            return (<div key={Math.random()}>\n              <ListItem>\n                <ListItemText primary={policy}></ListItemText>\n              </ListItem>\n            </div>);\n          })\n          : <Typography></Typography>}\n      </List>\n    </Box>;\n  }\n\n  _buildPriceList(hotel) {\n    return <Box flexGrow=\"1\">\n      <List dense={true}>\n        <Typography variant=\"caption\">Room Prices</Typography>\n        {hotel.price ?\n          Object.keys(hotel.price).map(key => {\n            return (<div key={Math.random()}>\n              <ListItem button>\n                <ListItemText primary={key.charAt(0).toUpperCase() + key.slice(1)} secondary={hotel.price[key] ? ('â‚¹' + hotel.price[key]) : 'Out of Stock'}></ListItemText>\n              </ListItem>\n            </div>);\n          })\n          : <Typography></Typography>}\n      </List>\n    </Box>;\n  }\n\n  _buildSummary(hotel) {\n    return <Box display=\"flex\" flexDirection=\"column\">\n      <Typography variant=\"h6\">{hotel.name}</Typography>\n      <Typography style={{ fontSize: 14 }} className=\"grey-text\">\n        {hotel.locality ? hotel.locality + ', ' : ''}{hotel.city ? hotel.city : ''}\n      </Typography>\n\n      <Box mt={2}>\n        {hotel.price ? (this.getMinimumFromObj(hotel.price) !== Infinity ? (<Typography style={{ fontSize: 14 }} variant=\"subtitle2\">\n          Starting from â‚¹{this.getMinimumFromObj(hotel.price)}\n        </Typography>) : (<Typography className=\"danger-text\" style={{ fontSize: 14 }} variant=\"subtitle2\">\n          Out of Stock\n        </Typography>)) : null}\n      </Box>\n    </Box>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getHotels: (payload) => dispatch(getHotels(payload)),\n  embedPrices: (payload) => dispatch(embedPrices(payload)),\n  getDetails: (payload) => dispatch(getDetails(payload)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Hotels)","export const getHotels = (payload) => ({ type: 'GET_HOTELS', payload })\nexport const embedPrices = (payload) => ({ type: 'EMBED_PRICES', payload })\nexport const getDetails = (payload) => ({ type: 'GET_DETAILS', payload })","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let initState = {\n  hotels: []\n};\n\nconst mergeById = (a1, a2) =>\n  a1.map(itm => ({\n    ...a2.find((item) => (item.id === itm.id) && item),\n    ...itm\n  }));\n\nexport default (state = initState, action) => {\n  switch (action.type) {\n    case 'GET_HOTELS':\n      return { hotels: [...state.hotels, ...action.payload] }\n    case 'EMBED_PRICES':\n      return { hotels: mergeById(state.hotels, action.payload) }\n    case 'GET_DETAILS':\n      return {\n        hotels: state.hotels.map(hotel => {\n          return { ...hotel, details: { ...action.payload } }\n        })\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux';\nimport hotelReducer from './hotelReducer';\n\nexport default combineReducers({\n  hotelReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reboot.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\n// Material UI Theme\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#0EB550',\n      contrastText: '#FFFFFF'\n    }\n  }\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n  );\n}","import React from 'react'\nimport Navbar from './components/Navbar'\nimport Hotels from './components/Hotels'\n\nexport default function App() {\n  return (\n    <div>\n      <Navbar />\n      <Hotels />\n    </div>\n  )\n}"],"sourceRoot":""}